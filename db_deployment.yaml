# Define a 'Persistent Volume Claim' (PVC) for Mysql storage, dynamically provisioned cluster

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim     # name of PVC, essentail for identifying the storage data
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

# Configure 'Deployment' of mysql server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
    tier: database

spec:
  selector: # mysql Pod should contain some labels
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      containers:
        - image: mysql:8.0
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
              value: javatechie
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:   # Mounting volume obtained from Persistent Volume Claim
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql # This is the path in the container on which the mounting will take place
      volumes:
        - name: mysql-persistent-storage # Obtaining 'volume' from PVC
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
# Define a 'Service' To Expose mysql to other Services
apiVersion: v1
kind: Service
metadata:
  name: mysql   #DNS name
  labels:
    app: mysql
    tier: database
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector:     # mysql Pod Should contain same labels
    app: mysql
    tier: database
  clusterIP: None   # we use DNS, thus ClusterIp is not relevant